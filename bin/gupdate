#! /usr/bin/env python

"""
    Copyright (c) 2005--2009
    Jan Nieuwenhuizen <janneke@gnu.org>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
"""

def argv0_relocation ():
    import os, sys
    bindir = os.path.dirname (sys.argv[0])
    prefix = os.path.dirname (bindir)
    if not prefix:
        prefix = bindir + '/..'
    sys.path.insert (0, prefix)

argv0_relocation ()

import optparse
import re
import sys
#
from gub import misc
from gub.syntax import printf

def parse_command_line ():
    p = optparse.OptionParser ()
    p.description = 'Grand Unified Builder - update spec urls.'
    p.usage = 'gupdate [OPTION]... SPEC...'
    p.add_option ('--replace', default=False, help='replace old urls.')
    (options, files) = p.parse_args ()
    if not files:
        p.print_help ()
    return (options, files)

def do_spec (file_name, options):
    s = open (file_name).read ()
    m = re.search ('''source = ['"](http://[^'"]+[.]tar.(?:gz|bz2))['"]''', s)
    if not m:
        printf ('%(file_name)s: cannot find ball' % locals ())
        return
    url = m.group (1)
    name, version_tuple, format = misc.split_ball (url)
    url_dir = url[:url.rfind ('/')+1]
    latest = misc.latest_url (url_dir, name)
    if url != latest:
        if options.replace:
            printf ('%(file_name)s: updating to: %(latest)s' % locals ())
            misc.file_sub ([(url, latest)], file_name)
        else:
            printf ('%(file_name)s: new ball: %(latest)s' % locals ())

def main ():
    (options, files) = parse_command_line ()
    for f in files:
        do_spec (f, options)

if __name__ == '__main__':
    main ()

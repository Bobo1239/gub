--- libgc-6.8/configure.in~	2006-06-07 07:01:52.000000000 +0200
+++ libgc-6.8/configure.in	2011-01-29 11:50:21.967211128 +0100
@@ -143,6 +143,10 @@ case "$THREADS" in
      *-*-cygwin*)
 	AC_DEFINE(GC_WIN32_THREADS)
 	;;
+     *-*-mingw*)
+	AC_DEFINE(GC_WIN32_THREADS)
+	AC_DEFINE(THREAD_LOCAL_ALLOC)
+	;;
      *-*-darwin*)
 	AC_DEFINE(GC_DARWIN_THREADS)
 	AC_DEFINE(THREAD_LOCAL_ALLOC)
--- libgc-6.8/include/gc_pthread_redirects.h~	2006-02-17 05:07:29.000000000 +0100
+++ libgc-6.8/include/gc_pthread_redirects.h	2011-01-29 11:17:25.303026857 +0100
@@ -48,7 +48,8 @@
 /* We treat these similarly. */
 # include <pthread.h>
 # include <signal.h>
-
+# define _PID_T_
+# include <sys/types.h>
   int GC_pthread_create(pthread_t *new_thread,
                         const pthread_attr_t *attr,
 		        void *(*start_routine)(void *), void *arg);
--- libgc-6.8/mark_rts.c~	2005-02-01 20:05:05.000000000 +0100
+++ libgc-6.8/mark_rts.c	2011-01-29 12:29:41.444915320 +0100
@@ -618,7 +618,7 @@ ptr_t cold_gc_frame;
      /* If the world is not stopped, this is unsafe.  It is	*/
      /* also unnecessary, since we will do this again with the	*/
      /* world stopped.						*/
-#      ifdef THREAD_LOCAL_ALLOC
+#      if defined (THREAD_LOCAL_ALLOC) && !defined(GC_WIN32_THREADS)
          if (GC_world_stopped) GC_mark_thread_local_free_lists();
 #      endif
 
--- libgc-6.8/misc.c~	2006-02-10 20:38:46.000000000 +0100
+++ libgc-6.8/misc.c	2011-01-29 12:28:31.187195541 +0100
@@ -498,7 +498,7 @@ void GC_init()
     UNLOCK();
     ENABLE_SIGNALS();
 
-#   if defined(PARALLEL_MARK) || defined(THREAD_LOCAL_ALLOC)
+#if (defined(PARALLEL_MARK) || defined(THREAD_LOCAL_ALLOC)) && !defined(GC_WIN32_THREADS)
 	/* Make sure marker threads and started and thread local */
 	/* allocation is initialized, in case we didn't get 	 */
 	/* called from GC_init_parallel();			 */

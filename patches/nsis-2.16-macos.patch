--- nsis-old/SCons/Config/gnu	Tue Mar 14 20:22:57 2006
+++ NSIS/SCons/Config/gnu	Fri Apr 28 18:48:00 2006
@@ -35,6 +35,25 @@
 defenv['CPP_REQUIRES_STDLIB'] = 1
 defenv['SUBSYS_CON'] = '-Wl,--subsystem,console'
 
+### helper functions
+
+# on Mac OS X, programs built with g++ 4.0, stl and -s error out:
+#   dyld: lazy symbol binding failed: lazy pointer not found
+#   dyld: lazy pointer not found
+#
+# to avoid this, this function checks if -s works
+
+def TestStrip(ctx):
+	c = """
+		#include <vector>
+
+		int main() {
+			std::vector<int> v;
+			return 0;
+		}
+	"""
+	ctx.CheckLinkFlag('-s', run = 1, extension = '.cpp', code = c)
+
 ### debug
 
 if defenv['DEBUG']:
@@ -66,11 +85,10 @@
 	makensis_env.Append(CCFLAGS = '-O2')            # optimize
 makensis_env.Append(CCFLAGS = '-Wall')            # all warnings
 
-if not defenv['DEBUG']:
-	makensis_env.Append(LINKFLAGS = '-s')           # strip
-
 conf = FlagsConfigure(makensis_env)
 conf.CheckLinkFlag('$MAP_FLAG')                   # generate map file
+if not defenv['DEBUG']:
+	TestStrip(conf)                                 # strip
 conf.Finish()
 
 ### plugin environment
@@ -93,14 +111,13 @@
 cp_util_env = defenv.Copy()
 
 if not defenv['DEBUG']:
-	cp_util_env.Append(CCFLAGS = '-O2')                # optimize
-cp_util_env.Append(CCFLAGS = '-Wall')                # all warnings
-
-if not defenv['DEBUG']:
-	cp_util_env.Append(LINKFLAGS = '-s')               # strip
+	cp_util_env.Append(CCFLAGS = '-O2')             # optimize
+cp_util_env.Append(CCFLAGS = '-Wall')             # all warnings
 
 conf = FlagsConfigure(cp_util_env)
 conf.CheckLinkFlag('$MAP_FLAG')                   # generate map file
+if not defenv['DEBUG']:
+	TestStrip(conf)                                 # strip
 conf.Finish()
 
 ### util environment
--- nsis-old/SCons/utils.py	Tue Mar 14 20:21:12 2006
+++ NSIS/SCons/utils.py	Fri Apr 28 17:38:02 2006
@@ -36,19 +36,26 @@
 """
 Checks if a linker flag is valid.
 """
-def check_link_flag(ctx, flag):
+def check_link_flag(ctx, flag, run = 0, extension = '.c', code = None):
 	ctx.Message('Checking for linker flag %s... ' % flag)
 
 	old_flags = ctx.env['LINKFLAGS']
 	ctx.env.Append(LINKFLAGS = flag)
 
-	test = """
-		int main() {
-			return 0;
-		}
-	"""
+	if code:
+		test =  code
+	else:
+		test = """
+			int main() {
+				return 0;
+			}
+		"""
+
+	result = ctx.TryLink(test, extension)
+
+	if run:
+		result = result and ctx.TryRun(test, extension)[0]
 
-	result = ctx.TryLink(test, '.c')
 	ctx.Result(result)
 
 	if not result:
--- nsis-old/Source/cbzip2.h	Mon Oct 11 16:26:13 2004
+++ NSIS/Source/cbzip2.h	Fri Apr 28 16:19:08 2006
@@ -6,6 +6,8 @@
 
 class CBzip2 : public ICompressor {
   public:
+    virtual ~CBzip2() {}
+
     int Init(int level, unsigned int dict_size) {
       last_ret = !BZ_STREAM_END;
       stream = new bz_stream;
--- nsis-old/Source/compressor.h	Mon Oct 11 16:26:13 2004
+++ NSIS/Source/compressor.h	Fri Apr 28 16:18:54 2006
@@ -6,6 +6,8 @@
 
 class ICompressor {
   public:
+    virtual ~ICompressor() {}
+
     virtual int Init(int level, unsigned int dict_size) = 0;
     virtual int End() = 0;
     virtual int Compress(bool finish) = 0;
--- nsis-old/Source/czlib.h	Mon Oct 11 16:26:13 2004
+++ NSIS/Source/czlib.h	Fri Apr 28 16:18:40 2006
@@ -6,6 +6,8 @@
 
 class CZlib : public ICompressor {
   public:
+    virtual ~CZlib() {}
+
     int Init(int level, unsigned int dict_size) {
       stream = new z_stream;
       if (!stream) return Z_MEM_ERROR;
--- nsis-old/Source/ResourceEditor.h	Sat Mar 25 20:50:51 2006
+++ NSIS/Source/ResourceEditor.h	Fri Apr 28 18:43:20 2006
@@ -61,6 +61,7 @@
   WORD Length;
   WCHAR NameString[1];
 } IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;
+#  pragma pack()
 #endif
 
 #pragma pack(4)
--- nsis-old/Source/strlist.h	Tue Oct 12 22:26:23 2004
+++ NSIS/Source/strlist.h	Fri Apr 28 16:30:48 2006
@@ -131,7 +131,7 @@
     // returns -1 when name already exists and pos if added
     int add(const char *name, int case_sensitive=0, int alwaysreturnpos=0)
     {
-      int where;
+      int where=0;
       T newstruct={0,};
       int pos=find(name,-1,case_sensitive,1,&where);
       if (pos==-1) return alwaysreturnpos ? where : -1;
--- nsis-old/Source/util.cpp	Sat Apr 15 14:51:02 2006
+++ NSIS/Source/util.cpp	Fri Apr 28 15:39:24 2006
@@ -14,6 +14,13 @@
 #  include <iconv.h>
 #endif
 
+#ifdef __APPLE__
+namespace Apple { // defines struct section
+#  include <mach-o/dyld.h> // for _NSGetExecutablePath
+};
+#  include <sys/param.h> // for MAXPATHLEN
+#endif
+
 #include <cassert> // for assert
 #include <algorithm>
 #include <stdexcept>
@@ -636,8 +643,8 @@
   return string(temp_buf);
 #elif __APPLE__
   char temp_buf[MAXPATHLEN+1];
-  unsigned long buf_len = MAXPATHLEN;
-  int rc = _NSGetExecutablePath(temp_buf, &buf_len);
+  unsigned int buf_len = MAXPATHLEN;
+  int rc = Apple::_NSGetExecutablePath(temp_buf, &buf_len);
   assert(rc == 0);
   return string(temp_buf);
 #else /* Linux/BSD/POSIX/etc */
--- nsis-old/Source/Platform.h	Sat Mar 11 20:12:30 2006
+++ NSIS/Source/Platform.h	Fri Apr 28 15:48:59 2006
@@ -37,7 +37,7 @@
 typedef const unsigned short *LPCWCH, *PCWCH, *LPCWSTR, *PCWSTR;
 typedef unsigned int UINT_PTR;
 // basic stuff
-typedef unsigned long HANDLE;
+typedef void * HANDLE;
 typedef unsigned long HKEY;
 // some gdi
 typedef unsigned long COLORREF;

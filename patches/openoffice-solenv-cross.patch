--- solenv/inc/startup/startup.mk.orig	2008-10-21 09:41:14.000000000 +0200
+++ solenv/inc/startup/startup.mk	2008-10-21 09:52:19.000000000 +0200
@@ -40,9 +40,20 @@ CALLTARGETS=$(MAKETARGETS)
 OS_variable_needed
 .ENDIF
 
-# Customize macro definitions based on seting of OS.
-# This must come before the default macro definitions which follow.
-.INCLUDE .NOINFER : $(INCFILENAME:d)$(OS)$/macros.mk
+# Customize macro definitions based on seting of BUILD_OS, after
+# translation into a third naming scheme (1. config.guess,
+# 2. configure.in) devised in 3. set_soenv.in: $B_OS.
+.IF "$(CROSS_COMPILING)" == "no"
+B_OS = $(OS)
+.ELSE # "$(CROSS_COMPILING)" == "yes"
+.IF "$(BUILD_OS)" == "Linux"
+B_OS = LINUX
+.ELSE # "$(BUILD_OS)" != "Linux"
+.ERROR : ; @echo Work in progress: cross compiling only on Linux
+.ENDIF 
+.ENDIF # "$(CROSS_COMPILING)" != "yes"
+
+.INCLUDE .NOINFER : $(INCFILENAME:d)$(B_OS)$/macros.mk
 
 # ----------------- Default Control Macro definitions -----------------------
 # Select appropriate defaults for basic macros
--- solenv/bin/build.pl.orig	2008-07-22 18:46:59.000000000 +0200
+++ solenv/bin/build.pl	2008-10-21 10:58:44.000000000 +0200
@@ -61,7 +61,7 @@
     my $enable_multiprocessing = 1;
     my $cygwin = 0;
     $cygwin++ if ($^O eq 'cygwin');
-    if ($ENV{GUI} eq 'WNT' && !$cygwin) {
+    if ($ENV{BUILD_OS} eq 'WNT' && !$cygwin) {
         eval { require Win32::Process; import Win32::Process; };
         $enable_multiprocessing = 0 if ($@);
     };
@@ -812,7 +838,7 @@ sub CorrectPath {
 sub check_dmake {
 #print "Checking dmake...";
 #    my $dmake_batch = CorrectPath("$tmp_dir/dmake.bat");
-    if ($QuantityToBuild && ($ENV{GUI} eq 'WNT') && ($ENV{USE_SHELL} eq '4nt')) {
+    if ($QuantityToBuild && ($ENV{BUILD_OS} eq 'WNT') && ($ENV{USE_SHELL} eq '4nt')) {
         if (open(DMAKEVERSION, "where dmake |")) {
             my @output = <DMAKEVERSION>;
             close DMAKEVERSION;
@@ -857,7 +883,7 @@ sub get_commands {
     while ($arg = pop(@dmake_args)) {
         $dmake .= ' '.$arg;
     };
-#    if (($ENV{GUI} eq 'WNT') && $QuantityToBuild) {
+#    if (($ENV{BUILD_OS} eq 'WNT') && $QuantityToBuild) {
 #        print_error("There is no such executable $_4nt_exe") if (!-e $_4nt_exe);
 #        $dmake_batch = generate_4nt_batch();
 #    };
@@ -873,7 +899,7 @@ sub get_commands {
 #                 ($ENV{GUI} eq 'MACOSX')) &&
 #                ($Dir eq '/')) {
 #        return 1;
-#    } elsif (    (($ENV{GUI} eq 'WNT') ||
+#    } elsif (    (($ENV{BUILD_OS} eq 'WNT') ||
 #                 ($ENV{GUI} eq 'WIN') ||
 #                 ($ENV{GUI} eq 'OS2')) &&
 #                ($Dir =~ /\S:\/$/)) {
@@ -933,7 +959,7 @@ sub CheckPlatform {
     return 1 if (($ENV{GUI} eq 'WIN') && ($Platform eq 'w'));
     return 1 if (($ENV{GUI} eq 'UNX') && ($Platform eq 'u'));
     return 1 if (($ENV{GUI} eq 'OS2') && ($Platform eq 'p'));
-    return 1 if (($ENV{GUI} eq 'WNT') &&
+    return 1 if ((($ENV{TARGET_OS} eq 'WNT') || ($ENV{TARGET_OS} eq 'MinGW')) &&
                  (($Platform eq 'w') || ($Platform eq 'n')));
     return 0;
 };
@@ -1378,7 +1409,7 @@ sub cancel_build {
         };
         print "\nAttention: if you build and deliver the above module(s) you may prolongue your the build issuing command \"build --from @broken_modules_names\"\n";
     } else {
-#        if ($ENV{GUI} eq 'WNT') {
+#        if ($ENV{BUILD_OS} eq 'WNT') {
             while (children_number()) {
                 handle_dead_children(1);
             }
@@ -1400,7 +1431,7 @@ sub store_error {
     my ($pid, $error_code) = @_;
     return 0 if (!$error_code);
     my $child_nick = $processes_hash{$pid};
-    if ($ENV{GUI} eq 'WNT') {
+    if ($ENV{BUILD_OS} eq 'WNT') {
         if (!defined $had_error{$child_nick}) {
             $had_error{$child_nick}++;
             return 1;
@@ -1429,7 +1460,7 @@ sub handle_dead_children {
     my $try_once_more = 0;
     do {
         my $pid = 0;
-        if ($ENV{GUI} eq 'WNT' && !$cygwin) {
+        if ($ENV{BUILD_OS} eq 'WNT' && !$cygwin) {
             foreach $pid (keys %processes_hash) {
                 my $exit_code  = undef;
                 my $proc_obj = $windows_procs{$pid};
@@ -1552,7 +1583,7 @@ sub start_child {
 #        html_store_job_info($dependencies_hash, $job_dir, $error_code);
 #        if ($error_code) {
 #            # give windows (4nt) one more chance 
-#            if ($ENV{GUI} eq 'WNT' && !$cygwin) {
+#            if ($ENV{BUILD_OS} eq 'WNT' && !$cygwin) {
 #                $error_code = do_post_job($`, $post_job, $dependencies_hash);
 #            };
 #            if ($error_code) {
@@ -1569,7 +1600,7 @@ sub start_child {
     my $children_running;
     my $oldfh = select STDOUT;
     $| = 1;
-    if ($ENV{GUI} eq 'WNT' && !$cygwin) {
+    if ($ENV{BUILD_OS} eq 'WNT' && !$cygwin) {
         print "$job_dir\n";
         my $process_obj = undef;
         my $rc = Win32::Process::Create($process_obj, $dmake_bin,
@@ -1725,7 +1756,7 @@ sub do_custom_job {
         $error_code = run_job($job, CorrectPath($StandDir.$module), $module_job);
         if ($error_code) {
             # give windows (4nt) one more chance 
-            if ($ENV{GUI} eq 'WNT' && !$cygwin) {
+            if ($ENV{BUILD_OS} eq 'WNT' && !$cygwin) {
                 $error_code = run_job($job, CorrectPath($StandDir.$module), $module_job);
             };
         };
@@ -3180,7 +3211,7 @@ sub html_store_job_info {
 
 sub start_server_on_port {
     my $port = shift;
-    if ($ENV{GUI} eq 'WNT') {
+    if ($ENV{BUILD_OS} eq 'WNT') {
         $socket_obj = new IO::Socket::INET (#LocalAddr => hostname(),
                                   LocalPort => $port,
                                   Proto     => 'tcp',
--- solenv/bin/deliver.pl.orig	2008-10-21 10:52:30.000000000 +0200
+++ solenv/bin/deliver.pl	2008-10-21 10:58:49.000000000 +0200
@@ -140,7 +140,7 @@ parse_options();
 print "$script_name -- version: $script_rev\n" if !$opt_silent;
 
 if ( ! $opt_delete ) {
-    if ( $ENV{GUI} eq 'WNT' ) {
+    if ( $ENV{BUILD_OS} eq 'WNT' ) {
         if ($ENV{COM} eq 'GCC') {
             initialize_strip() ;
         };
@@ -411,7 +411,7 @@ sub parse_options 
         $arg =~ /^-delete$/     and $opt_delete = 1  and next;
         $arg =~ /^-dontdeletecommon$/ and $dontdeletecommon = 1 and next;
         $arg =~ /^-help$/       and $opt_help   = 1  and $arg = '';
-        $arg =~ /^-link$/       and $ENV{GUI} ne 'WNT' and $opt_link = 1 and next;
+        $arg =~ /^-link$/       and $ENV{BUILD_OS} ne 'WNT' and $opt_link = 1 and next;
         $arg =~ /^-deloutput$/  and $opt_deloutput = 1 and next;
         $arg =~ /^-debug$/      and $is_debug   = 1  and next;
         $arg =~ /^-checkdlst$/  and $opt_checkdlst = 1 and next;
@@ -711,7 +711,7 @@ sub is_unstripped {
         # OS X file command doesn't know if a file is stripped or not
         if (($file_type =~ /not stripped/o) || ($file_type =~ /Mach-O/o) || 
             (($file_type =~ /PE/o) && ($ENV{GUI} eq 'WNT') &&
-             ($nm_output = `nm $file_name 2>&1`) && $nm_output &&
+             ($nm_output = `$(NM) $file_name 2>&1`) && $nm_output &&
              !($nm_output =~ /no symbols/i) && !($nm_output =~ /not recognized/i))) {
             return '1' if ($file_name =~ /\.bin$/o);
             return '1' if ($file_name =~ /\.so\.*/o);
@@ -1485,7 +1485,7 @@ sub usage 
     print STDERR "  -force       copy even if not newer\n";
     print STDERR "  -dontdeletecommon do not delete common files (for -delete option)\n";
     print STDERR "  -help        print this message\n";
-    if ( !defined($ENV{GUI}) || $ENV{GUI} ne 'WNT' ) {
+    if ( !defined($ENV{BUILD_OS}) || $ENV{BUILD_OS} ne 'WNT' ) {
         print STDERR "  -link        hard link files into the solver to save disk space\n";
     }
     print STDERR "  -minor       deliver into minor (milestone)\n";
--- solenv/inc/wntgcci6.mk.pristine	2008-10-21 11:22:18.000000000 +0200
+++ solenv/inc/wntgcci6.mk	2008-10-21 11:54:32.000000000 +0200
@@ -50,7 +50,10 @@ CXX*=gcc
 #CFLAGS=-c -Wall -I$(INCLUDE) $(OLE2DEF)
 # new:
 #CYGINC=$(INCLUDE:s/-I /-I/:+"  ":s/;/ -I/:s/-I  //:s/   / /)
-CFLAGS=-fmessage-length=0 -c -nostdinc -fpcc-struct-return $(OLE2DEF)
+CFLAGS=-fmessage-length=0 -c -fpcc-struct-return $(OLE2DEF)
+.IF "$(CROSS_COMPILING)" == "no"
+CFLAGS += -nostdinc
+.ENDIF # "$(CROSS_COMPILING)" == "no"
 ###
 CFLAGSCC=-pipe $(ARCH_FLAGS)
 CFLAGSCXX=-pipe $(ARCH_FLAGS)
@@ -108,17 +111,37 @@ STATIC= -static
 DYNAMIC= -dynamic
 
 LINK*=$(CC)
-CYGLIB=$(LIB:s/;/ -L/)
-LINKFLAGS=-nostdlib -Wl,--enable-stdcall-fixup,--enable-runtime-pseudo-reloc -L$(CYGLIB)
+# FIXME: better way to strip trailing semicolon from $(LIB) to avoid
+# CYGLIB content to end with -L, eating next argument
+LIB___=$(LIB)---
+LIB_NO_TRAILING_SEMI___ = $(LIB___:s/;---//)
+LIB_NO_TRAILING_SEMI = $(LIB_NO_TRAILING_SEMI___:s/---//)
+CYGLIB=$(LIB_NO_TRAILING_SEMI:s/;/ -L/)
+LINKFLAGS=-Wl,--enable-stdcall-fixup,--enable-runtime-pseudo-reloc
+.IF "$(CYGLIB)" != ""
+LINKFLAGS += -L$(CYGLIB)
+.ENDIF #"$(CYGLIB)" != ""
+.IF "$(CROSS_COMPILING)" == "no"
+LINKFLAGS += -nostdlib
+.ELSE # "$(CROSS_COMPILING)" == "yes"
+LINKFLAGS += -L$(SOLARBINDIR)
+.ENDIF # "$(CROSS_COMPILING)" == "yes"
 .IF "$(USE_MINGW)"=="cygwin"
 MINGWLIBDIR=$(COMPATH)$/lib$/mingw
 .ELSE
 MINGWLIBDIR=$(COMPATH)$/lib
 .ENDIF
-LINKFLAGSAPPGUI=-mwindows $(MINGWLIBDIR)$/crt2.o
-LINKFLAGSSHLGUI=--warn-once -mwindows -shared $(MINGWLIBDIR)$/dllcrt2.o
-LINKFLAGSAPPCUI=-mconsole $(MINGWLIBDIR)$/crt2.o
-LINKFLAGSSHLCUI=--warn-once -mconsole -shared $(MINGWLIBDIR)$/dllcrt2.o
+LINKFLAGSAPPGUI=-mwindows
+LINKFLAGSSHLGUI=--warn-once -mwindows -shared
+LINKFLAGSAPPCUI=-mconsole
+LINKFLAGSSHLCUI=--warn-once -mconsole -shared
+.IF "$(CROSS_COMPILING)" == "no"
+LINKFLAGSAPPGUI+=$(MINGWLIBDIR)$/crt2.o
+LINKFLAGSSHLGUI+=$(MINGWLIBDIR)$/dllcrt2.o
+LINKFLAGSAPPCUI+=$(MINGWLIBDIR)$/crt2.o
+LINKFLAGSSHLCUI+=$(MINGWLIBDIR)$/dllcrt2.o
+.ENDIF # "$(CROSS_COMPILING)" == "no"
+
 LINKFLAGSTACK=
 LINKFLAGSPROF=
 LINKFLAGSDEBUG=-g
@@ -150,7 +171,11 @@ STDSHLCUIMT+=-lmingw32 -lmoldname -lming
 MAPSYM=tmapsym
 MAPSYMFLAGS=
 
+.IF "$(CROSS_COMPILING)" == "no"
 RC=rc
+.ELSE # "$(CROSS_COMPILING)" == "yes"
+RC=wrc --nostdinc -I $(COMPATH)/../../include -DCROSS_COMPILING=1
+.ENDIF # "$(CROSS_COMPILING)" == "yes"
 RCFLAGS=-D__MINGW32__ -DWIN32 -D_WIN32_IE=0x400 -fo$@ $(RCFILES)
 RCLINK=
 RCLINKFLAGS=
@@ -168,12 +193,20 @@ RCSETVERSION=
 DLLPOSTFIX=gi
 PCHPOST=.gch
 
+.IF "$(CROSS_COMPILING)" == "no"
+LINK_PSDK_LIB=$(PSDK_HOME)/lib/
+PSDK_DOT_LIB=.lib
+.ELSE # "$(CROSS_COMPILING)" == "yes"
+LINK_PSDK_LIB=-l
+PSDK_DOT_LIB=
+.ENDIF # "$(CROSS_COMPILING)" == "yes"
+
 ADVAPI32LIB=-ladvapi32
 SHELL32LIB=-lshell32
 GDI32LIB=-lgdi32
 OLE32LIB=-lole32
 OLEAUT32LIB=-loleaut32
-UUIDLIB=$(PSDK_HOME)$/lib$/uuid.lib
+UUIDLIB=$(LINK_PSDK_LIB)uuid$(PSDK_DOT_LIB)
 WINSPOOLLIB=-lwinspool
 IMM32LIB=-limm32
 PSPLIB=-lpsp
@@ -187,14 +220,14 @@ USER32LIB=-luser32
 LIBCMT=-lmsvcrt
 COMDLG32LIB=-lcomdlg32
 COMCTL32LIB=-lcomctl32
-CRYPT32LIB=$(PSDK_HOME)$/lib$/crypt32.lib
-GDIPLUSLIB=$(PSDK_HOME)$/lib$/gdiplus.lib
-DBGHELPLIB=$(PSDK_HOME)$/lib$/dbghelp.lib
-MSILIB=$(PSDK_HOME)$/lib$/msi.lib
-DDRAWLIB=$(DIRECTXSDK_LIB)/ddraw.lib
-SHLWAPILIB=$(PSDK_HOME)$/lib$/shlwapi.lib
-URLMONLIB=$(PSDK_HOME)$/lib$/urlmon.lib
-UNICOWSLIB=$(PSDK_HOME)$/lib$/unicows.lib
+CRYPT32LIB=$(LINK_PSDK_LIB)crypt32$(PSDK_DOT_LIB)
+GDIPLUSLIB=$(LINK_PSDK_LIB)gdiplus$(PSDK_DOT_LIB)
+DBGHELPLIB=$(LINK_PSDK_LIB)dbghelp$(PSDK_DOT_LIB)
+MSILIB=$(LINK_PSDK_LIB)msi$(PSDK_DOT_LIB)
+DDRAWLIB=$(DIRECTXSDK_LIB)/ddraw$(PSDK_DOT_LIB)
+SHLWAPILIB=$(LINK_PSDK_LIB)shlwapi$(PSDK_DOT_LIB)
+URLMONLIB=$(LINK_PSDK_LIB)urlmon$(PSDK_DOT_LIB)
+UNICOWSLIB=$(LINK_PSDK_LIB)unicows$(PSDK_DOT_LIB)
 WININETLIB=-lwininet
 OLDNAMESLIB=-lmoldname
-MSIMG32LIB=$(PSDK_HOME)$/lib$/msimg32.lib
+MSIMG32LIB=$(LINK_PSDK_LIB)msimg32$(PSDK_DOT_LIB)
--- solenv/inc/unitools.mk.pristine	2008-10-21 11:31:04.000000000 +0200
+++ solenv/inc/unitools.mk	2008-10-21 13:54:42.000000000 +0200
@@ -39,7 +39,7 @@ XSLTPROC*=xsltproc
 
 ULFCONV*=ulfconv
 
-MAKEDEPEND*=$(SOLARBINDIR)$/makedepend
+MAKEDEPEND*=$(TOOLS_DIR)/makedepend
 
 SCP_CHECK_TOOL:=checkscp$E
 
